What happens when you initialize a repository? Why do you need to do it?

When a repository is initialized, git creates a hidden directory which it will use to store commits.  
This needs to be done in order to implement version control with git.  A repository needs to be created
before any commits can be made.


How is the staging area different from the working directory and the repository?
What value do you think it offers?

A staging area is an important part of version control because is acts as a midpoint between whats actively being worked on, and what is ready to be integrated.  The value it offers is that it allows for specific files to be committed at a time as opposed to everything which has been worked on since the last commit.  This allows for project progression that is faciliatated by the user. 

How can you use the staging area to make sure you have one commit per logical
change?

The staging area is a good place to put files before I'm ready to commit a logical change.  I can make sure that the size of my commit is right
by using the diff command with different options.  

To see what I've changed with whats staged and what was previously committed, I can use "git diff --staged".  This will allow me to check
to make sure what is staged is what is the complete logical change that I want to commit. 

If I feel like I've missed something, I can run the command "git diff", which will compare my working directory with my staging area.  This will help
me inspect what else I feel like is worth committing.


What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

test